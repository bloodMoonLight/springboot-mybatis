<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot.mapper.OrdersCustomMapper">

    <!--配置用户与订单的映射-->
    <resultMap id="ordersAndUser" type="Orders">
            <!--设置主键-->
            <id property="id" column="id" />
            <!--设置映射实体类与数据表中的列名-->
            <result property="userid" column="user_id" />
            <result property="number" column="number"/>
            <result column="createtime" property="createTime"/>
            <result column="note" property="note"/>
            <!-- 配置映射的关联用户信息 -->
        <!--association:用于映射关联查询单个对象的信息
19          property:要将关联查询的用户信息映射到Orders中那个属性 就是在订单实体类中的user
20       -->
        <association property="user" javaType="User">
            <!-- id:关联查询用户的唯一标识
23                 column:指定唯一标识用户信息的列
24                 property:映射到user的那个属性
25             -->
            <id property="id" column="id"/>
            <result property="username" column="username"/>
            <result property="sex" column="sex"/>
            <result property="address" column="address"/>
        </association>
    </resultMap>
    
    <!--一对多-->
    <resultMap id="ordersAndOrderDetailResultMap" type="Orders" extends="ordersAndUser">
        <!-- 订单信息
             关联用户信息
             使用extends继承，不用在中配置订单信息和用户信息的映射
         -->
        <collection property="orderdetails" ofType="OrderDetail">
            <id column="id" property="id"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
            <result column="orders_id" property="ordersId"/>
        </collection>
    </resultMap>


    <!-- 用户与商品的一对多关系 -->
    <resultMap id="UserManyItmes" type="User">
        <!--配置user实体类的映射-->
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <!--配置用户与订单的关系 一对多-->
        <collection property="ordersList" ofType="Orders">
            <id property="id" column="id"/>
            <result property="userid" column="user_id"/>
            <result property="number" column="number"/>
            <!--配置商品明细的映射 一对多的关系-->
            <collection property="orderdetails" ofType="OrderDetail">
                <id property="id" column="id"/>
                <result property="ordersId" column="orders_id"/>
                <result property="itemsId" column="items_id"/>
                <result property="itemsNum" column="itmes_num"/>

                <!--配置订单详细与商品之间的关系 一对一关系采用 association-->
                <association property="items" javaType="Items">
                    <id property="id" column="id"/>
                    <result property="itemsName" column="items_name"/>
                    <result property="price" column="items_price"/>
                    <result property="detail" column="items_detail"/>
                </association>
            </collection>
        </collection>
    </resultMap>


    <select id="findOrdersUser" resultType="OrdersCustom">
          select o.*, t.username,t.sex,t.address  from orders as o, t_user as t where o.user_id = t.id;
    </select>


    <select id="finOrders" resultMap="ordersAndUser">
        select o.*, t.username,t.sex,t.address  from orders as o, t_user as t where o.user_id = t.id;
    </select>

    <select id="findOrderDetail" resultMap="ordersAndOrderDetailResultMap">
        SELECT
            t1.*,
            t2.username,
            t2.sex,
            t2.address,
            t3.id orderdetail_id,
            t3.items_id,
            t3.items_num,
            t3.orders_id
        FROM
            orders t1,
            t_user t2,
            orderdetail t3
        WHERE t1.user_id = t2.id AND t3.orders_id=t1.id
    </select>


    <select id="findUserAndItems" resultMap="UserManyItmes">
        SELECT
            t1.*,
            t2.username,
            t2.sex,
            t2.address,
            t3.id orderdetail_id,
            t3.items_id,
            t3.items_num,
            t3.orders_id,
            t4.itemsname items_name,
            t4.detail items_detail,
            t4.price items_price
        FROM
            orders t1,
            t_user t2,
            orderdetail t3,
            items t4
        WHERE t1.user_id =  t2.id AND  t3.orders_id=t1.id AND t3.items_id = t4.id
    </select>

</mapper>